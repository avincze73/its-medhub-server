/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CaseView.java
 *
 * Created on 2010.11.23., 9:22:28
 */
package casemodule.view;

import casemodule.iview.ICaseView;
import casemodule.viewmodel.CaseViewModel;
import event.EditCaseEvent;
import event.EditCaseEventListener;
import event.ShowEmptyViewEvent;
import event.TDSEventManager;
import java.awt.Cursor;
import java.beans.PropertyVetoException;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;

/**
 *
 * @author vincze.attila
 */
public class CaseView extends javax.swing.JInternalFrame implements ICaseView,
        EditCaseEventListener {

    private CaseViewModel viewModel;
    private CaseListView caseListView;
    private CaseEditView caseEditView;
    private DataProcLogView dataProcLogView;

    /** Creates new form CaseView */
    public CaseView() {
        viewModel = new CaseViewModel(this);
        initComponents();
        createViews();
    }

    public CaseViewModel getViewModel() {
        return viewModel;
    }

    private void createViews() {
        try {
            caseEditView = new CaseEditView();
            dtpCase.add(caseEditView);
            caseEditView.setMaximum(true);
            caseEditView.setVisible(true);

            dataProcLogView = new DataProcLogView();
            dtpCase.add(dataProcLogView);
            dataProcLogView.setMaximum(true);
            dataProcLogView.setVisible(true);


            TDSEventManager.getEventListenerList().add(EditCaseEventListener.class, this);

            caseListView = new CaseListView();
            dtpCase.add(caseListView);
            caseListView.setMaximum(true);
            caseListView.setVisible(true);
            caseListView.setSelected(true);

            dtpCase.getDesktopManager().activateFrame(caseListView);
            viewModel.setTitle(caseListView.getViewModel().getTitle());

        } catch (PropertyVetoException ex) {
            Logger.getLogger(CaseView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        dtpCase = new javax.swing.JDesktopPane();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/casemodule/image/case16.png"))); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${viewModel.title}"), this, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dtpCase, javax.swing.GroupLayout.DEFAULT_SIZE, 932, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dtpCase, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        try {
            if (dtpCase.getSelectedFrame() instanceof DataProcLogView) {
                viewModel.setTitle(caseListView.getViewModel().getTitle());
                caseListView.setMaximum(true);
                dtpCase.getDesktopManager().activateFrame(caseListView);
            } else if (dtpCase.getSelectedFrame() instanceof CaseListView) {
                this.setVisible(false);
                TDSEventManager.fireShowEmptyViewEvent(new ShowEmptyViewEvent(""));
            }
        } catch (PropertyVetoException ex) {
            Logger.getLogger(CaseView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formInternalFrameClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane dtpCase;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void eventOccured(final EditCaseEvent evt) {

        SwingWorker openCaseDetail = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                getContentPane().setCursor(new Cursor(Cursor.WAIT_CURSOR));
                caseListView.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                //lblInProgress.setText(viewModel.getBundle().getString("caseDetailInProgress"));
                //lblInProgress.setVisible(true);
                dataProcLogView.getViewModel().loadDataProcLog((Long) evt.getSource());
                //viewModel.setTitle(dataProcLogView.getViewModel().getTitle());
                dtpCase.getDesktopManager().activateFrame(dataProcLogView);
                return null;
            }

            @Override
            protected void done() {
                try {
                    super.done();
                    get();
                    //caseDetailView.setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CaseView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ExecutionException ex) {
                    Logger.getLogger(CaseView.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    getContentPane().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    getContentPane().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    caseListView.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    //lblInProgress.setVisible(false);
                }
            }
        };
        openCaseDetail.execute();



    }
}
